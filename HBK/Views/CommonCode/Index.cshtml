@model HBK.Models.CommonModelView
@{
    ViewBag.Title = Resources.Langues.System;
    Layout = "~/Views/Shared/_SystemMenu.cshtml";
}

<style>
    #CommonCodeGrid td input .k-invalid {
        background-color: red;
        height: 1000px;
    }
</style>

<div class="w3-container">
    <h3>@Resources.Langues.CommonCodeManagement</h3>
    <br />
    @*@(Html.Kendo().Grid<HBK.Models.CommonModelView>()
                .Name("CommonCodeGrid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.IsChange).Hidden();
                    columns.Bound(p => p.ComCode).Title(Resources.Langues.CommonCode);
                    columns.Bound(p => p.ComSubCode).Title(Resources.Langues.CommonSubCode);
                    columns.Bound(p => p.ComName).Title(Resources.Langues.CommonName);
                    columns.Bound(p => p.ComName2).Title(Resources.Langues.CommonName2);
                    columns.Command(command => { command.Edit().Text(Resources.Langues.Edit).UpdateText(Resources.Langues.Update).CancelText(Resources.Langues.Cancel); command.Destroy().Text(Resources.Langues.Delete); }).Width(220);
                })
                .Events(ev => ev.Edit("showDropDownList"))
                .ToolBar(toolbar => toolbar.Create().Text(Resources.Langues.AddNew))
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                .Pageable()
                .Sortable()
                .Scrollable()
                .HtmlAttributes(new { style = "height:550px;" })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Events(events => events.Error("error_handler").Sync("sync_handler"))
                    .Model(model => { model.Id(p => p.ComCode);})
            .Create(update => update.Action("EditingInline_Create", "CommonCode"))
            .Read(read => read.Action("EditingInline_Read", "CommonCode"))
            .Update(update => update.Action("EditingInline_Update", "CommonCode"))
            .Destroy(update => update.Action("EditingInline_Destroy", "CommonCode"))
        )
        )*@

    @(Html.Kendo().Grid<HBK.Models.CommonModelView>()
            .Name("CommonCodeGrid")
            .Columns(columns =>
            {
                columns.Bound(p => p.IsChange).Hidden();
                columns.Bound(p => p.ComCode).Title(Resources.Langues.CommonCode);
                columns.Bound(p => p.ComSubCode).Title(Resources.Langues.CommonSubCode);
                columns.Bound(p => p.CommonType).Title(Resources.Langues.CommonType);
                columns.Bound(p => p.ComName).Title(Resources.Langues.CommonName);
                columns.Bound(p => p.ComName2).Title(Resources.Langues.CommonName2);
                columns.Command(command => { command.Edit().Text(Resources.Langues.Edit).UpdateText(Resources.Langues.Update).CancelText(Resources.Langues.Cancel); command.Destroy().Text(Resources.Langues.Delete); }).Width(220);
            })
            .Events(ev => { ev.Edit("showDropDownList"); })
            .ToolBar(toolbar => toolbar.Create().Text(Resources.Langues.AddNew))
            .Editable(editable => editable.Mode(GridEditMode.InLine))
            .Pageable()
            .Sortable()
            .Scrollable()
            .HtmlAttributes(new { style = "height:550px;" })
            .DataSource(dataSource => dataSource
                .Custom()
                .Type("aspnetmvc-ajax")
                .PageSize(20)
                .ServerPaging(false)
                .ServerSorting(false)
                .ServerFiltering(false)
                .Events(events => events.Error("error_handler").Sync("sync_handler"))
                .Schema(schema => schema
                .Data("Data")
                .Total("Total")
                .Errors("Errors")
                .Model(m =>
                {
                    m.Id(p => p.ComCode);
                    //m.Field("ComCode", typeof(string)).From("ComCode");
                    //m.Field("ComSubCode", typeof(string)).From("ComSubCode");
                    //m.Field("ComName", typeof(string)).From("ComName");
                    //m.Field("ComName2", typeof(string)).From("ComName2");
                    //m.Field("IsCompleted", typeof(bool));

                })

            )
                .Transport(transport =>
                {
                    transport.Create(update => update.Action("EditingInline_Create", "CommonCode"));
                    transport.Read(read => read.Action("EditingInline_Read", "CommonCode"));
                    transport.Update(update => update.Action("EditingInline_Update", "CommonCode"));
                    transport.Destroy(update => update.Action("EditingInline_Destroy", "CommonCode"));
                })

    //        .Model(model => { model.Id(p => p.ComCode); })
    //.Create(update => update.Action("EditingInline_Create", "CommonCode"))
    //.Read(read => read.Action("EditingInline_Read", "CommonCode"))
    //.Update(update => update.Action("EditingInline_Update", "CommonCode"))
    //.Destroy(update => update.Action("EditingInline_Destroy", "CommonCode"))
    )
    )


</div>

<script type="text/javascript">

    function sync_handler(e) {
        this.read();
    }

    $("#CommonCodeGrid").on("click", ".myCustomClass", function (e) {
       
    });

    //register custom validation rules
    //(function ($, kendo) {
    //    $.extend(true, kendo.ui.validator, {
    //        rules: { // custom rules
    //            productnamevalidation: function (input, params) {
    //                if (input.is("[name='ProductName']") && input.val() != "") {
    //                    input.attr("data-productnamevalidation-msg", "Product Name should start with capital letter");
    //                    return /^[A-Z]/.test(input.val());
    //                }

    //                return true;
    //            },
    //            custom: function (input, params) {
    //                if (input.is("[name='ComName']") && input.val() == "") {
    //                    input.attr("data-custom-msg", "CommName is required!");
    //                    return false;
    //                }
    //                return input.val();
    //            }
    //        },
    //        messages: { //custom rules messages
    //            productnamevalidation: function (input) {
    //                // return the message text
    //                return input.attr("data-val-productnamevalidation");
    //            },
    //            custom: function (input) {
    //                // return the message text
    //                return input.attr("data-val-custom");
    //            }
    //        }
    //    });
    //})(jQuery, kendo);

    //show server errors if any
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            bootbox.alert(message);
        }
    }

    function showDropDownList(e) {

        var tempComSubCode = e.model.TempComSubCode;
        //console.log(tempComSubCode);

        if (e.model.isNew() == false) {
            $(e.container).find('input[name="ComCode"]').attr("readonly", true);
            //$(e.container).find('input[name="CommonType"]').attr("readonly", true);
            if (tempComSubCode == null) {
                $("#ComSubCode").data("kendoDropDownList").text('@Resources.Langues.Root');
                $(e.container).find('input[name="ComSubCode"]').attr("readonly", true);
            }
        }

        $("#ComSubCode").kendoDropDownList({
            dataValueField: "CommCode",
            dataTextField: "CommName",
            serverFiltering: true,
            change: onChange,
            dataSource: {
                transport: {
                    read: {
                        dataType: "json",
                        url: "@Url.Action("SpecialType_Read", "CommonCode")"
                    }
                }
            }
        });

        //$("#CommonType").kendoDropDownList({
        //    dataTextField: "CommonTypeName",
        //    dataValueField: "CommonTypeId",
        //    serverFiltering: true,
        //    dataSource: [
        //        { CommonTypeName: "1", CommonTypeId: 1 },
        //        { CommonTypeName: "2", CommonTypeId: 2 }
        //    ]
        //});

    }

    function onChange(event) {
        var grid = $("#CommonCodeGrid").data("kendoGrid");
        var dataItem = grid.dataItem($(event.sender.wrapper).closest("tr"));
        //console.log("item: ", $("#ComSubCode").data("kendoDropDownList").value());
        dataItem.IsChange = true;
        //console.log(dataItem.IsChange);
    }

</script>