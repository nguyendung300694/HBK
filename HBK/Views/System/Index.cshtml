
@{
    ViewBag.Title = Resources.Langues.System;
    Layout = "~/Views/Shared/_SystemMenu.cshtml";
}

<style>
    /*.user-manament {
        display: none;
    }*/
</style>

<div class="w3-container">
    <h3>@Resources.Langues.UserManagement</h3>
    <br />
    @(Html.Kendo().Grid<HBK.Models.MemberInformationViewModel>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Template(t => { }).ClientTemplate("#= renderNumber(data) #").Title("No").Width(40);
        //columns.Bound(member => member.Id).Hidden();
        columns.Bound(member => member.IsChange).Hidden();
        columns.Bound(member => member.Email).Title(Resources.Langues.Email);
        columns.Bound(member => member.FirstName).Title(Resources.Langues.FirstName).Width(85);
        columns.Bound(member => member.LastName).Title(Resources.Langues.LastName).Width(90);
        columns.Bound(member => member.SpecialtyType).Title(Resources.Langues.SpecialtyType).Width(110);
        columns.Bound(member => member.Career).Title(Resources.Langues.Career);
        columns.Bound(member => member.CareerDuration).Title(Resources.Langues.CareerDuration).Width(120);
        columns.Bound(member => member.Recommender).Title(Resources.Langues.Recommender);
        columns.Bound(member => member.LastLoginDate).Title(Resources.Langues.LastLogin).Format("{0: yyyy/MM/dd HH:mm:ss}").Width(120);
        columns.Command(command => { command.Edit().Text(Resources.Langues.Edit).UpdateText(Resources.Langues.Update).CancelText(Resources.Langues.Cancel); }).Width(130);
    })
    .Events(ev => ev.DataBound("onDataBound"))
    .Events(ev => ev.Edit("PassSpecialType"))
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events => events.Error("error_handler").Sync("sync_handler"))
        .Model(model => { model.Id(p => p.Id); model.Field(p => p.LastLoginDate).Editable(false); model.Field(p => p.Email).Editable(false); model.Field(p => p.Recommender).Editable(false); })
        .Read(read => read.Action("EditingInline_Read", "System"))
        .Update(update => update.Action("EditingInline_Update", "System"))
    )
    )

</div>

<script type="text/javascript">
    var counter = 1;

    function onDataBound(e) {
        counter = 1;
    }

    function renderNumber(data) {
        return counter++;
    }

    function PassSpecialType(e) {
        var tempSpecialTypeCode = e.model.SpecialtyTypeCode;

        $("#SpecialtyType").kendoDropDownList({
            dataValueField: "CommCode",
            dataTextField: "CommName",
            autoBind: true,
            serverFiltering: true,
            change: onChange,
            dataSource: {
                
                transport: {
                    read: {
                        dataType: "json",
                        url: "@Url.Action("SpecialType_Read", "System")" + "?specialTypeID=" + e.model.SpecialtyTypeCode
                    }
                }
            }
        });

        $("#SpecialtyType").data("kendoDropDownList").value(tempSpecialTypeCode);
    }


    function onChange(event) {
        var grid = $("#grid").data("kendoGrid");
        var dataItem = grid.dataItem($(event.sender.wrapper).closest("tr"));
        dataItem.IsChange = true;
    };

    //var viewModel = new kendo.data.ObservableObject({
    //    dataSource: productDatasource,
    //    actionSource: actionDataSource,

    //    onChange: function (event) {
    //        alert("Text/Value : " + event.sender.text() + "/" + event.sender.value());
    //        var grid = $("#grid").data("kendoGrid");
    //        var dataItem = grid.dataItem($(event.sender.wrapper).closest("tr"));
    //        alert(dataItem.ProductID + " " + dataItem.ProductName);
    //    },

    //});

    //kendo.bind($("#grid"), viewModel);

    function sync_handler(e) {
        this.read();

    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            bootbox.alert(message);
        }
    }
</script>


